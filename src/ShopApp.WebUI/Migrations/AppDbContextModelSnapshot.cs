// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopApp.Models;

namespace ShopApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ShopApp.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Sukienki"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Spodnie"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Buty"
                        });
                });

            modelBuilder.Entity("ShopApp.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShopApp.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ShopApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProductOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka1.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka1.png",
                            InStock = true,
                            IsProductOfTheWeek = true,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Sukienka 1",
                            Price = 124.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/spodnie1.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/spodnie1.png",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Spodnie 1",
                            Price = 518.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/spodnie2.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/spodnie2.png",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Spodnie 2",
                            Price = 718.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka2.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka2.png",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Sukienka 2",
                            Price = 155.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/buty1.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/buty1.png",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Buty 1",
                            Price = 103.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/buty2.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/buty2.png",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Buty 2",
                            Price = 177.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka3.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka3.png",
                            InStock = false,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Sukienka 3",
                            Price = 15.90m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/buty3.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/buty3.png",
                            InStock = true,
                            IsProductOfTheWeek = true,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Buty 3",
                            Price = 192.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka4.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka4.png",
                            InStock = true,
                            IsProductOfTheWeek = true,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Sukienka 4",
                            Price = 1205.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka5.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/sukienka5.png",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Sukienka 5",
                            Price = 105.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Details = "",
                            ImageThumbnailUrl = "https://gotoit.pl/wp-content/uploads/2021/06/spodnie3.png",
                            ImageUrl = "https://gotoit.pl/wp-content/uploads/2021/06/spodnie3.png",
                            InStock = false,
                            IsProductOfTheWeek = false,
                            LongDescription = "Długi opis pobrany z bazy danych",
                            Name = "Spodnie 3",
                            Price = 1800.95m,
                            ShortDescription = "Krótki opis pobrany z bazy danych"
                        });
                });

            modelBuilder.Entity("ShopApp.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopApp.Models.OrderDetail", b =>
                {
                    b.HasOne("ShopApp.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopApp.Models.Product", b =>
                {
                    b.HasOne("ShopApp.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopApp.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("ShopApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopApp.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopApp.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
